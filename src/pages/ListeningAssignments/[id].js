import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import styles from '../../styles/quiz/quizpage.module.css';
import { cards } from '../../Data/Routes/ListeningAssignments';
import Link from 'next/link';
import { IoPlayCircleSharp } from "react-icons/io5";
import { useSelector } from 'react-redux'; // To access authentication status from Redux
import { FaLock } from 'react-icons/fa';
import { useRouter } from 'next/router';

export async function getServerSideProps(context) {
  const { userId } = context.query; // Get userId from query parameters

  if (!userId) {
    return {
      notFound: true, // Return 404 if userId is not provided
    };
  }

  // Use the API URL from the environment variable
  const apiUrl = process.env.NEXT_PUBLIC_BACKENDURL;
  const response = await fetch(`${apiUrl}/api/${userId}/performance`);
  const userData = await response.json();

  return {
    props: {
      userData, // Pass the fetched data as props
    },
  };
}

export default function ListeningAssignments({ userData }) {
  const { user } = useSelector((state) => state.auth); // Access authentication status
  const completedQuizzes = useSelector((state) => state.finishedQuizzes.completedQuizzes);
  const [isClient, setIsClient] = useState(false);
  const [reading, setReading] = useState(null);

  const router = useRouter();
  const { id } = router.query; // Get the dynamic `id` from the route

  const somedata = cards.find((data) => data.link === id);

  useEffect(() => {
    setIsClient(true); // Set to true when client-side is ready

    if (somedata) {
      // Dynamically import the lesson data
      import(`../../Data/ListeningAssignments/${somedata.data}`)
        .then((module) => setReading(module.data))
        .catch((error) => console.error('Error loading lesson data:', error));
    }
  }, [somedata]);

  if (!isClient || !somedata) {
    return <div>Loading...</div>;
  }

  const newcompletedexercise = userData?.completedExercises.filter(
    (data) => data.language === somedata.subject
  );

  return (
    <>
      <Head>
        <title>{somedata.heading}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo/newlogo1.png" />
      </Head>
      <main>
        <div className={styles.container}>
          <div className={styles.headcont}>
            <div className={styles.mainheading}>{somedata.heading}</div>
          </div>

          <div className={styles.cards1}>
            {reading?.map((data, index) => {
              const completedData = newcompletedexercise?.find(
                (quiz) => quiz.exercise.toString() === data.id
              );
              const completedStyles = completedData ? styles.completed : ''; // Add completed styles
              return (
                <div key={data.quiz} className={`${styles.card1} ${completedStyles}`}>
                  {user.trial && data.id < 3 || user.type === 'all' || !user.trial ? (
                    <Link
                      href={`SingleListeningAssignment/${somedata.link2}/${data.id}?userId=${user.userId}`}
                      className={styles.link}
                    >
                      <div className={styles.cardflex5}>
                        <div className={styles.info}>
                          <div className={styles.name}>{data.name}</div>
                          <div className={styles.level}>Level: {data.level}</div>
                          <div className={styles.score}>
                            Score: {completedData?.score ? completedData?.score : 'N/A'}
                          </div>
                        </div>
                        <div className={styles.imgcont}>
                          <IoPlayCircleSharp className={styles.img6} />
                        </div>
                      </div>
                    </Link>
                  ) : (
                    <div className={styles.locked2}>
                      <div className={styles.lockOverlay3}>
                        <FaLock />
                        <p>Locked</p>
                      </div>
                      <div className={styles.cardflex5}>
                        <div className={styles.info}>
                          <div className={styles.name}>{data.name}</div>
                          <div className={styles.level}>Level: {data.level}</div>
                        </div>
                        <div className={styles.imgcont}>
                          <IoPlayCircleSharp className={styles.img6} />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}
