import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import { cards } from '../../Data/Routes/WritingTask';
import styles from '../../styles/quiz/quizpage.module.css';
import Link from 'next/link';
import { IoPlayCircleSharp } from 'react-icons/io5';
import { useSelector } from 'react-redux';
import { FaLock } from 'react-icons/fa';
import { useRouter } from 'next/router';

export default function Lessons() {
  const { isAuthenticated, user } = useSelector((state) => state.auth); // Access authentication status
  const [isClient, setIsClient] = useState(false);
  const [lessonData, setLessonData] = useState(null);

  const router = useRouter();
  const { id } = router.query; // Get the dynamic `id` from the route

  const somedata = cards.find((data) => data.link === id);

  useEffect(() => {
    setIsClient(true); // Set to true when client-side is ready

    if (somedata) {
      // Dynamically import the lesson data
      import(`../../Data/WritingTaskdata/${somedata.data}`)
        // .then((module) => setLessonData(module.data))
        .then((module) => {
          let data = module.data;
          
          // Check condition and slice convoData
          if (somedata?.data === 'frenchb1' && (user?.type === 'frenchb1' || user?.next?.includes('frenchb1'))) {
            data = data.slice(0, 10); // Slice to only include first 5 entries
          }
          
          setLessonData(data); // Set the sliced or full data
        })
        .catch((error) => console.error('Error loading lesson data:', error));
    }
  }, [somedata]);

  if (!isClient || !somedata) {
    // Optionally return a loader or handle invalid `id`
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>{somedata.heading}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo/newlogo1.png" />
      </Head>
      <main>
        <div className={styles.container}>
          <div className={styles.headcont}>
            <div className={styles.mainheading}>{somedata.heading}</div>
          </div>

          <div className={styles.cards1}>
            {lessonData ? (
              lessonData.map((data, index) => (
                <div key={data.id} className={styles.card1}>
                  {user.trial && data.id < 3 || user.type === 'all' || !user.trial ? (
                    <Link href={`WritingTask/${somedata.link2}/${data.id}`} className={styles.link}>
                      <div className={styles.cardflex5}>
                        <div className={styles.info}>
                          <div className={styles.name}>{data.name}</div>
                          <div className={styles.level}>Level: {data.level}</div>
                        </div>
                        <div className={styles.imgcont}>
                          <IoPlayCircleSharp className={styles.img6} />
                        </div>
                      </div>
                    </Link>
                  ) : (
                    <div className={styles.locked2}>
                      <div className={styles.lockOverlay3}>
                        <FaLock />
                        <p>Locked</p>
                      </div>
                      <div className={styles.cardflex5}>
                        <div className={styles.info}>
                          <div className={styles.name}>{data.name}</div>
                          <div className={styles.level}>Level: {data.level}</div>
                        </div>
                        <div className={styles.imgcont}>
                          <IoPlayCircleSharp className={styles.img6} />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))
            ) : (
              <div>Loading lessons...</div>
            )}
          </div>
        </div>
      </main>
    </>
  );
}
