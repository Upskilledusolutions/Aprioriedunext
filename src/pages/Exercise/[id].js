import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import {cards} from '../../Data/Routes/Exercises'
import styles from '../../styles/quiz/quizpage.module.css';
import Image from 'next/image';
import Link from 'next/link';
import { FaLock } from 'react-icons/fa'; // Import a lock icon
import { useSelector } from 'react-redux'; // To access authentication status from Redux
import { useRouter } from 'next/router';

export async function getServerSideProps(context) {
  const { userId } = context.query;

// Use the API URL from the environment variable
const apiUrl = process.env.NEXT_PUBLIC_BACKENDURL;
const response = await fetch(`${apiUrl}/api/${userId}/performance`);
  const userData = await response.json();
  console.log("user", userId)
  return {
    props: {
      userData, // Pass the fetched data as props
    },
  };
}

export default function FrenchQuizes({ userData }) {
  // Use the `userData` prop directly
  const { isAuthenticated, user } = useSelector((state) => state.auth); // Access authentication status
  const completedQuizzes = useSelector(state => state.finishedQuizzes.completedQuizzes);
  const [isClient, setIsClient] = useState(false);
  const [exerciseData, setExerciseData] = useState(null);
  const router = useRouter();
  const { id } = router.query; // Get the dynamic `id` from the route

  const somedata = cards.find((data) => data.link === id);

  useEffect(() => {
    setIsClient(true); // Set to true when client-side is ready

    if (somedata) {
      // Dynamically import the lesson data
      import(`../../Data/ExerciseData/${somedata.data}`)
        .then((module) => {
          let data = module.quiz;          
          setExerciseData(data); // Set the sliced or full data
        })
        .catch((error) => console.error('Error loading lesson data:', error));
    }
  }, [somedata]);

  if (!isClient || !somedata) {
    // Optionally return a loader or handle invalid `id`
    return <div>Loading...</div>;
  }

  const subject = somedata.subject
  let newcompletedexercise = userData?.completedExercises?.filter(data => data.language == somedata.subject);
  let completedQuizzes1 = completedQuizzes.filter(data=> data.language == subject);
  return (
    <>
      <Head>
        <title>{somedata.heading}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo/newlogo1.png" />
      </Head>
      <main>
        <div className={styles.container}>
          <div className={styles.headcont}>
            <div className={styles.mainheading}>{somedata.heading}</div>
          </div>

          <div className={styles.cards1}>
            {exerciseData?.map((data, index) => {
             const completedData = newcompletedexercise?.filter(quiz => quiz.exercise.toString() === data.quiz);
             // Determine if all required question types are completed
             const isCompleted = completedData && completedData.length > 2

                          // Get scores for each question type
             const mcqScore = completedData?.find(type => type.questionTypes == "MCQs")?.score || 'N/A';
             const fillScore = completedData?.find(type => type.questionTypes == "FillInTheBlanks")?.score || 'N/A';
             const matchScore = completedData?.find(type => type.questionTypes == "MatchTheFollowing")?.score || 'N/A';

             console.log(completedData)
             const completedStyles = isCompleted ? styles.completed : ''; // Add completed styles
              return (
                <div key={data.quiz} className={`${styles.card1} ${completedStyles}`}>
                  {user.trial && data.quiz < 3 || user.type === 'all' || !user.trial ? 
                  <Link href={`${somedata.link2}/${data.quiz}`} className={styles.link}>
                    <div className={styles.imgcont}>
                      <Image className={styles.img5} src={'/assests/1.png'} width={500} height={500} alt="img" />
                      <div className={styles.indicators}>
                      {[...Array(3)].map((_, index) => (
                        <div
                          key={index}
                          className={`${styles.box} ${index < completedData?.length ? styles.filled : ""}`}
                        />
                      ))}
                      </div>
                    </div>
                    <div className={styles.info}>
                      <div className={styles.name}>{data.name}</div>
                      <div className={styles.level}>Level: {data.level}</div>
                      <div className={styles.topic}>Topic: {data.topic}</div>
                      <div className={styles.score}>Multiple Choice Questions Scrore: {mcqScore}</div>
                      <div className={styles.score}>Fill in the Blanks Scrore: {fillScore}</div>
                      <div className={styles.score}>Match the Following Scrore: {matchScore}</div>
                    </div>
                  </Link>: <div className={styles.locked2}>
                <div className={styles.lockOverlay3}>
                  <FaLock />
                  <p>Locked</p>
                </div>
                    <div className={styles.imgcont}>
                      <Image className={styles.img5} src={'/assests/1.png'} width={500} height={500} alt="img" />
                    </div>
                    <div className={styles.info}>
                      <div className={styles.name}>{data.name}</div>
                      <div className={styles.level}>Level: {data.level}</div>
                      <div className={styles.topic}>Topic: {data.topic}</div>
                    </div>
                  </div>}
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}
